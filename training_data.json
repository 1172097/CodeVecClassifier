[
    {
        "code_id": 19,
        "contexts": [
            {
                "start_token": "start",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "adj"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "adj"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "adj"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "adj"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "adj"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "adj"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(Assign)_(UnaryOp)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "dfs_bipartite"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "adj"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(UnaryOp)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "dfs_bipartite"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "adj"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "adj",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(UnaryOp)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "dfs_bipartite"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "adj"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(UnaryOp)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(UnaryOp)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(UnaryOp)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(UnaryOp)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "start",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "start",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "start",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(UnaryOp)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(UnaryOp)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)_(Assign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)_(Assign)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)_(Assign)_(UnaryOp)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)_(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)_(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "dfs_bipartite"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "adj"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)_(UnaryOp)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "dfs_bipartite"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "adj"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Assign)_(UnaryOp)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Assign)_(UnaryOp)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Assign)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "dfs_bipartite"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Assign)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Assign)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "adj"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Assign)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(BinOp)^(Subscript)^(Assign)^(If)_(If)_(UnaryOp)_(Call)_(Name)",
                "end_token": "nei"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 40,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Call)_(Name)",
                "end_token": "comp"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Call)_(Name)",
                "end_token": "comp"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Call)_(Name)",
                "end_token": "comp"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Call)_(Name)",
                "end_token": "comp"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Call)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Call)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Call)_(Name)",
                "end_token": "comp"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Call)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Call)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Call)_(Name)",
                "end_token": "comp"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Call)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Call)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Call)_(Name)",
                "end_token": "comp"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Call)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Call)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Name)",
                "end_token": "comp"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Call)_(Name)",
                "end_token": "comp"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Call)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Call)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Call)_(Name)",
                "end_token": "comp"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Call)_(Name)",
                "end_token": "comp"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Call)_(Name)",
                "end_token": "comp"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Call)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Call)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "comp",
                "path": "(Name)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Call)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Call)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Call)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Call)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 105,
        "contexts": [
            {
                "start_token": "total",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 41,
        "contexts": [
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Slice)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Slice)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(Subscript)_(Slice)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(Subscript)_(Slice)_(UnaryOp)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 33,
        "contexts": [
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "level_order",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "level_order"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "level_order"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 26,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 61,
        "contexts": [
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 32,
        "contexts": [
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Dict)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Dict)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Dict)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Dict)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Dict)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Dict)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)_(Dict)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)_(Dict)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "layers",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Dict)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Dict)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Dict)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Dict)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Dict)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Dict)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Dict)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Dict)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Dict)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Dict)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Dict)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Dict)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Dict)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Dict)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Dict)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Dict)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Dict)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Dict)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Dict)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "layers"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "neighbor"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 71,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "height",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "height",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "height",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "height",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "height",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "height",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "height",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(BinOp)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_area",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(BinOp)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(Assign)_(Call)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "width",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(Assign)^(While)_(Assign)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(Assign)^(While)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(Assign)^(While)_(Assign)_(Call)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(Assign)^(While)_(Assign)_(Call)_(BinOp)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(Assign)^(While)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "width"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "height"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(Assign)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(Assign)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(Assign)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(Assign)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_area"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(Assign)^(While)_(Assign)_(Name)",
                "end_token": "max_area"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 94,
        "contexts": [
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Delete)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Delete)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 98,
        "contexts": [
            {
                "start_token": "count",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "defaultdict"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "defaultdict",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "defaultdict",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "defaultdict",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "defaultdict",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "defaultdict",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "defaultdict",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "defaultdict",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "int",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "int",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "int",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "int",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "int",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "int",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "num",
                "path": "(Name)^(For)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "num",
                "path": "(Name)^(For)_(AugAssign)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "num",
                "path": "(Name)^(For)_(AugAssign)_(BinOp)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "num",
                "path": "(Name)^(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "num",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(For)_(AugAssign)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(For)_(AugAssign)_(BinOp)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(AugAssign)_(BinOp)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(AugAssign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(AugAssign)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(AugAssign)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(AugAssign)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(AugAssign)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "num",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "num",
                "path": "(Name)^(BinOp)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "num",
                "path": "(Name)^(BinOp)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "num",
                "path": "(Name)^(BinOp)^(AugAssign)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "num",
                "path": "(Name)^(BinOp)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "num",
                "path": "(Name)^(BinOp)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "num",
                "path": "(Name)^(BinOp)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "num",
                "path": "(Name)^(BinOp)^(AugAssign)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "num",
                "path": "(Name)^(BinOp)^(AugAssign)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "num",
                "path": "(Name)^(BinOp)^(AugAssign)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "num",
                "path": "(Name)^(BinOp)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(AugAssign)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(AugAssign)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(AugAssign)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(AugAssign)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Compare)^(If)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Compare)^(If)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Compare)^(If)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "result",
                "path": "(Name)^(AugAssign)^(If)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(AugAssign)^(If)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(AugAssign)^(If)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(AugAssign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(AugAssign)^(If)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(AugAssign)^(If)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "odd_count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(AugAssign)^(If)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(AugAssign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(BinOp)^(Subscript)^(AugAssign)^(If)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "odd_count",
                "path": "(Name)^(BinOp)^(Subscript)^(AugAssign)^(If)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "odd_count"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 106,
        "contexts": [
            {
                "start_token": "sub",
                "path": "(Name)^(Compare)_(Subscript)_(Name)",
                "end_token": "sub"
            },
            {
                "start_token": "sub",
                "path": "(Name)^(Compare)_(Subscript)_(Slice)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "sub",
                "path": "(Name)^(Compare)^(Return)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "sub",
                "path": "(Name)^(Compare)^(Return)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "sub",
                "path": "(Name)^(Compare)^(Return)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "sub",
                "path": "(Name)^(Compare)^(Return)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "sub",
                "path": "(Name)^(Compare)^(Return)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "sub",
                "path": "(Name)^(Subscript)_(Slice)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "sub",
                "path": "(Name)^(Subscript)^(Compare)^(Return)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "sub",
                "path": "(Name)^(Subscript)^(Compare)^(Return)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Call)_(Name)",
                "end_token": "is_palindrome"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Call)_(Name)",
                "end_token": "is_palindrome"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Call)_(Name)",
                "end_token": "is_palindrome"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Call)_(Name)",
                "end_token": "is_palindrome"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Call)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Call)_(Subscript)_(Slice)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Subscript)_(Slice)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Name)",
                "end_token": "is_palindrome"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Subscript)_(Slice)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Name)",
                "end_token": "is_palindrome"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(Call)_(Subscript)_(Slice)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Call)_(Name)",
                "end_token": "is_palindrome"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Call)_(Name)",
                "end_token": "is_palindrome"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)_(Subscript)_(Slice)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)^(If)_(Expr)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)^(If)_(Expr)_(Call)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)^(If)_(Expr)_(Call)_(Subscript)_(Slice)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)^(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "is_palindrome",
                "path": "(Name)^(Call)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Slice)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Call)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Slice)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Slice)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Slice)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Slice)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Slice)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Slice)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Slice)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Slice)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Slice)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Slice)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Slice)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Slice)^(Subscript)^(Call)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Slice)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Slice)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 38,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 63,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 89,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "pivot",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "pivot",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "pivot",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "pivot",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "pivot",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "pivot"
            },
            {
                "start_token": "pivot",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "pivot",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "pivot",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "pivot",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "pivot",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "pivot",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "pivot",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "pivot",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "pivot",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)^(While)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)^(While)^(While)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)^(While)^(While)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 57,
        "contexts": [
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 79,
        "contexts": [
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(While)_(Assign)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Assign)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(While)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Assign)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)_(While)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Assign)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Assign)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(While)_(Assign)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(Assign)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 59,
        "contexts": [
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Assign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Assign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 103,
        "contexts": [
            {
                "start_token": "start",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "start"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 46,
        "contexts": [
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Name)",
                "end_token": "root"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "tree"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Name)",
                "end_token": "root"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "tree"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "root",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "root",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "root",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "root",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "root",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "root",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "tree"
            },
            {
                "start_token": "root",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "tree"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "tree"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "tree"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "tree"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "tree"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "child",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "tree"
            },
            {
                "start_token": "child",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "child",
                "path": "(Name)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "child",
                "path": "(Name)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "child",
                "path": "(Name)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "tree",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "tree",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "tree",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "tree",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "child"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "child",
                "path": "(Name)^(Call)^(Expr)^(For)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 55,
        "contexts": [
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(List)_(Tuple)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(List)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(List)_(Tuple)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(List)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(List)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Assign)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(For)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(For)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Compare)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Compare)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Compare)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Compare)^(If)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Compare)^(If)_(For)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Compare)^(If)_(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Compare)^(If)_(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Subscript)^(Assign)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(For)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "levels",
                "path": "(Name)^(Subscript)^(Assign)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(Assign)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(For)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(Assign)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Assign)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Assign)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Assign)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Assign)^(If)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Assign)^(If)_(For)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Assign)^(If)_(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Assign)^(If)_(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Assign)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "levels"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Tuple)_(BinOp)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "level",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 99,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "val"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "val"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "val"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "val"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "val"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "val"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "val"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "val"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "val",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "val",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "val",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "val",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "val",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "val",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "val",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Assign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Assign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Assign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 60,
        "contexts": [
            {
                "start_token": "low",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 78,
        "contexts": [
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(While)_(BoolOp)_(Compare)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(While)_(BoolOp)_(Compare)_(BinOp)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(While)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(BinOp)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)_(Compare)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)_(Compare)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)_(Compare)_(BinOp)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Subscript)^(Compare)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Subscript)^(Compare)_(BinOp)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Subscript)^(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Compare)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Compare)_(BinOp)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Compare)^(BoolOp)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)^(While)^(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)^(While)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)^(While)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)^(For)_(While)_(BoolOp)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(BoolOp)^(While)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Subscript)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Subscript)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Subscript)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Subscript)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Subscript)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "deq"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(While)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)^(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "deq",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 107,
        "contexts": [
            {
                "start_token": "row",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(ListComp)_(Call)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(ListComp)_(comprehension)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(ListComp)_(comprehension)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "Q"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "."
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(ListComp)_(Call)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(ListComp)_(comprehension)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(ListComp)_(comprehension)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "Q"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "."
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(ListComp)_(Call)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(ListComp)_(comprehension)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(ListComp)_(comprehension)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "Q"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "."
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Call)^(ListComp)_(comprehension)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Call)^(ListComp)_(comprehension)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "row",
                "path": "(Name)^(Call)^(ListComp)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "row",
                "path": "(Name)^(comprehension)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "row",
                "path": "(Name)^(comprehension)^(ListComp)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "board",
                "path": "(Name)^(comprehension)^(ListComp)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "col",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Tuple)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "col",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "col",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "col",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "col",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "col",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "col",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "col",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "col",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "col",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "col",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "col",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "col",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "col",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "cols",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "cols",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "cols",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "cols",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "cols",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "cols",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "cols",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "cols",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "cols",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "cols",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "cols",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "cols",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "row",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "row",
                "path": "(Name)^(BinOp)^(Compare)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "row",
                "path": "(Name)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "row",
                "path": "(Name)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "row",
                "path": "(Name)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "row",
                "path": "(Name)^(BinOp)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "col",
                "path": "(Name)^(BinOp)^(Compare)_(Name)",
                "end_token": "diag1"
            },
            {
                "start_token": "col",
                "path": "(Name)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "col",
                "path": "(Name)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "col",
                "path": "(Name)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "col",
                "path": "(Name)^(BinOp)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "diag1",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "row"
            },
            {
                "start_token": "diag1",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "diag1",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "diag2"
            },
            {
                "start_token": "diag1",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "cols"
            },
            {
                "start_token": "diag1",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "col"
            },
            {
                "start_token": "diag1",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "diag1"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 83,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(BinOp)_(List)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(BinOp)_(List)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(BinOp)_(List)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)_(BinOp)_(List)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Call)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "result"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 34,
        "contexts": [
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(Assign)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(Assign)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(Assign)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(While)_(Assign)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(Assign)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(Assign)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(Assign)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "node",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)_(While)_(Assign)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "node",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "node",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(While)_(Assign)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Assign)^(While)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Assign)^(While)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Assign)^(While)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Compare)^(If)^(While)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Compare)^(If)^(While)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Compare)^(If)^(While)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "current"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "current",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 70,
        "contexts": [
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)_(Return)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(UnaryOp)^(If)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Subscript)^(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Subscript)^(Assign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "write_index",
                "path": "(Name)^(Subscript)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "write_index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 30,
        "contexts": [
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_topological_sort"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_topological_sort"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_topological_sort"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_topological_sort"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_topological_sort"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_topological_sort"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "dfs_topological_sort",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "dfs_topological_sort",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "dfs_topological_sort",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 47,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 108,
        "contexts": [
            {
                "start_token": "i",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "word"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "word"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "temp"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "#"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "word"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "temp"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "#"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "word",
                "path": "(Name)^(Call)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "word",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "word",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "word",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "word",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "word",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "word",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "word",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "word",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "temp"
            },
            {
                "start_token": "word",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "word",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "word",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "#"
            },
            {
                "start_token": "word",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "word"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "temp"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "#"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "temp"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "#"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "found"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "temp"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "#"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "found"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Call)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Call)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "temp"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "#"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "found"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Call)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Call)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "temp"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "#"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "found"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Call)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Call)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "word"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "temp"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "#"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "found"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Call)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Call)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "word"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "temp"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "#"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "found"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Call)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Call)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "word"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "temp"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "#"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "found"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)_(Call)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)_(Call)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "word"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "temp"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "#"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "found"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "any"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 17,
        "contexts": [
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "dfs_recursive",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "dfs_recursive",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "dfs_recursive",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 29,
        "contexts": [
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "dfs_detect_cycle"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "parent"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "dfs_detect_cycle"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "parent"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "dfs_detect_cycle"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "parent"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "dfs_detect_cycle"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "parent"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Call)_(Name)",
                "end_token": "dfs_detect_cycle"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "parent"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(If)_(Call)_(Name)",
                "end_token": "dfs_detect_cycle"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(If)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(If)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(If)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(If)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "parent"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "dfs_detect_cycle",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "dfs_detect_cycle",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "dfs_detect_cycle",
                "path": "(Name)^(Call)^(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "dfs_detect_cycle",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Compare)_(Name)",
                "end_token": "parent"
            },
            {
                "start_token": "dfs_detect_cycle",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "dfs_detect_cycle",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "dfs_detect_cycle",
                "path": "(Name)^(Call)^(If)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Compare)_(Name)",
                "end_token": "parent"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(If)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Compare)_(Name)",
                "end_token": "parent"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(If)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Compare)_(Name)",
                "end_token": "parent"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(If)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Compare)_(Name)",
                "end_token": "parent"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(If)^(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(If)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(If)_(If)_(Compare)_(Name)",
                "end_token": "parent"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "parent",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "parent",
                "path": "(Name)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "parent",
                "path": "(Name)^(Compare)^(If)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 6,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Return)^(If)^(FunctionDef)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(FunctionDef)_(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "binary_search_recursive"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 25,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 73,
        "contexts": [
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "merged",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(FunctionDef)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(FunctionDef)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(FunctionDef)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(FunctionDef)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr2",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "arr2",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr2",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "arr2",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr2",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr2",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr2",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr2",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr1",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr2"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr2",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr2",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "merged"
            },
            {
                "start_token": "arr2",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "arr1"
            },
            {
                "start_token": "arr2",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 113,
        "contexts": [
            {
                "start_token": "start",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(For)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 20,
        "contexts": [
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 88,
        "contexts": [
            {
                "start_token": "s1_count",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "Counter"
            },
            {
                "start_token": "s1_count",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "s1"
            },
            {
                "start_token": "s1_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s1_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "Counter"
            },
            {
                "start_token": "s1_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s1_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s1"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "Counter"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s1",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s1",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "Counter"
            },
            {
                "start_token": "s1",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s1",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "Counter"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s1"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "s1_count"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s1"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "s1_count"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "s1_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "s1_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Delete)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Delete)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s1"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)_(Subscript)_(Name)",
                "end_token": "s2"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s1"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "s1_count"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "s2_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s1"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "s1_count"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "s2_count"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "s2",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s1"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 52,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 67,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Return)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "first"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "find_first"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Return)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "first"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "find_first"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Return)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "first"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "find_first"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "first"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "first"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Return)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "first"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "find_first"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Return)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "first"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "find_first"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Return)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "first"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "find_first"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Return)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "first"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "find_first"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "first"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 27,
        "contexts": [
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "bubble_sort_recursive"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "bubble_sort_recursive"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "bubble_sort_recursive"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "bubble_sort_recursive"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "bubble_sort_recursive"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)^(FunctionDef)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)^(FunctionDef)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "bubble_sort_recursive"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)^(FunctionDef)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)^(FunctionDef)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "bubble_sort_recursive"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "bubble_sort_recursive"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "bubble_sort_recursive"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 80,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "s"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 53,
        "contexts": [
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 51,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 117,
        "contexts": [
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Subscript)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(List)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Subscript)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(List)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Subscript)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(List)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Assign)_(BinOp)_(Subscript)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Assign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Assign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Assign)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Assign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Assign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Assign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Assign)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Assign)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Assign)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Assign)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(List)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Subscript)^(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Subscript)^(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Subscript)^(BinOp)^(Assign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Subscript)^(BinOp)^(Assign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Assign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Assign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Assign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Assign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Assign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Assign)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "next_num"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "next_num",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(List)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(List)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(List)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 10,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 37,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(While)_(AugAssign)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(While)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(While)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(While)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(While)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(While)_(AugAssign)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(While)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(While)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(While)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(While)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 11,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(AugAssign)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(While)_(AugAssign)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(While)_(AugAssign)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)^(While)_(AugAssign)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 39,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(BoolOp)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(BoolOp)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 76,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(IfExp)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(IfExp)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 112,
        "contexts": [
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "9"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "9"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "9"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "9"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "9"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "9"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "9",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Subscript)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "c",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(BinOp)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Subscript)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "r",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "board"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(BinOp)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)_(BinOp)_(BinOp)_(BinOp)_(Name)",
                "end_token": "r"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)_(BinOp)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(BinOp)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "board",
                "path": "(Name)^(Subscript)^(Subscript)^(Compare)^(BoolOp)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "r",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "r",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "r",
                "path": "(Name)^(BinOp)^(BinOp)^(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "r",
                "path": "(Name)^(BinOp)^(BinOp)^(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "r",
                "path": "(Name)^(BinOp)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "r",
                "path": "(Name)^(BinOp)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "r",
                "path": "(Name)^(BinOp)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "r",
                "path": "(Name)^(BinOp)^(BinOp)^(BinOp)^(Subscript)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(BinOp)^(Subscript)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(BinOp)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(Subscript)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(BinOp)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Subscript)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(BinOp)_(Name)",
                "end_token": "c"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(Subscript)^(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(Subscript)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "c",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "c",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "c",
                "path": "(Name)^(BinOp)^(BinOp)^(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "c",
                "path": "(Name)^(BinOp)^(BinOp)^(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "c",
                "path": "(Name)^(BinOp)^(BinOp)^(BinOp)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(BinOp)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)_(BinOp)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(BinOp)^(BinOp)^(Subscript)^(Compare)_(Name)",
                "end_token": "k"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 68,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swap_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Tuple)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Tuple)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Tuple)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Tuple)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Tuple)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Tuple)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)^(For)^(FunctionDef)_(Return)_(Tuple)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)^(For)^(FunctionDef)_(Return)_(Tuple)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(For)^(FunctionDef)_(Return)_(Tuple)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(For)^(FunctionDef)_(Return)_(Tuple)_(Name)",
                "end_token": "swap_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 118,
        "contexts": [
            {
                "start_token": "index",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "value"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "value"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "value"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "value",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Slice)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Slice)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "num",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "num"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(If)_(Compare)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "curr"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 22,
        "contexts": [
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Tuple)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Tuple)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Tuple)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Tuple)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Return)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Return)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Return)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Return)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(List)^(BinOp)^(Return)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(List)^(BinOp)^(Return)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 93,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Return)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(If)_(Return)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(If)_(Return)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "3",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "longest",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "longest"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 102,
        "contexts": [
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Delete)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Delete)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 13,
        "contexts": [
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(keyword)_(Constant)",
                "end_token": " "
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(keyword)_(Constant)",
                "end_token": " "
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(keyword)_(Constant)",
                "end_token": " "
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Expr)_(Call)_(keyword)_(Constant)",
                "end_token": " "
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(Expr)_(Call)_(keyword)_(Constant)",
                "end_token": " "
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(keyword)_(Constant)",
                "end_token": " "
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)_(keyword)_(Constant)",
                "end_token": " "
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)_(keyword)_(Constant)",
                "end_token": " "
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": " ",
                "path": "(Constant)^(keyword)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": " ",
                "path": "(Constant)^(keyword)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": " ",
                "path": "(Constant)^(keyword)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": " ",
                "path": "(Constant)^(keyword)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": " ",
                "path": "(Constant)^(keyword)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "neighbor"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 23,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "closest",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "closest"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "target"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 81,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Tuple)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 45,
        "contexts": [
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(While)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)_(If)_(While)_(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "start",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(While)_(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)_(While)_(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "color",
                "path": "(Name)^(Subscript)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Assign)^(If)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(If)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(If)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(If)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(If)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(If)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(If)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(If)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(If)_(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(If)_(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(If)_(While)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(If)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(If)_(While)_(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "color"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "color"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 77,
        "contexts": [
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Delete)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Delete)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "char_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "char_count"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 4,
        "contexts": [
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "neighbor"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 86,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "zero_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(While)_(Compare)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(While)_(Compare)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "zero_count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 21,
        "contexts": [
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Tuple)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(JoinedStr)_(Constant)",
                "end_token": "Node: "
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(JoinedStr)_(Constant)",
                "end_token": ", Level: "
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Tuple)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(List)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Tuple)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(JoinedStr)_(Constant)",
                "end_token": "Node: "
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(JoinedStr)_(Constant)",
                "end_token": ", Level: "
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Tuple)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(JoinedStr)_(Constant)",
                "end_token": "Node: "
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(JoinedStr)_(FormattedValue)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(JoinedStr)_(Constant)",
                "end_token": ", Level: "
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(JoinedStr)_(FormattedValue)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(For)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Expr)_(Call)_(JoinedStr)_(Constant)",
                "end_token": "Node: "
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Expr)_(Call)_(JoinedStr)_(Constant)",
                "end_token": ", Level: "
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Expr)_(Call)_(JoinedStr)_(Constant)",
                "end_token": "Node: "
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Expr)_(Call)_(JoinedStr)_(Constant)",
                "end_token": ", Level: "
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "level",
                "path": "(Name)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(JoinedStr)_(Constant)",
                "end_token": "Node: "
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(JoinedStr)_(FormattedValue)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(JoinedStr)_(Constant)",
                "end_token": ", Level: "
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(JoinedStr)_(FormattedValue)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(JoinedStr)_(Constant)",
                "end_token": "Node: "
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(JoinedStr)_(FormattedValue)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(JoinedStr)_(Constant)",
                "end_token": ", Level: "
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(JoinedStr)_(FormattedValue)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)_(JoinedStr)_(Constant)",
                "end_token": "Node: "
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)_(JoinedStr)_(FormattedValue)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)_(JoinedStr)_(Constant)",
                "end_token": ", Level: "
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)_(JoinedStr)_(FormattedValue)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "Node: ",
                "path": "(Constant)^(JoinedStr)_(FormattedValue)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "Node: ",
                "path": "(Constant)^(JoinedStr)_(Constant)",
                "end_token": ", Level: "
            },
            {
                "start_token": "Node: ",
                "path": "(Constant)^(JoinedStr)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "Node: ",
                "path": "(Constant)^(JoinedStr)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "Node: ",
                "path": "(Constant)^(JoinedStr)^(Call)^(Expr)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "Node: ",
                "path": "(Constant)^(JoinedStr)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "Node: ",
                "path": "(Constant)^(JoinedStr)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "Node: ",
                "path": "(Constant)^(JoinedStr)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(FormattedValue)^(JoinedStr)_(Constant)",
                "end_token": ", Level: "
            },
            {
                "start_token": "node",
                "path": "(Name)^(FormattedValue)^(JoinedStr)_(FormattedValue)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "node",
                "path": "(Name)^(FormattedValue)^(JoinedStr)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(FormattedValue)^(JoinedStr)^(Call)^(Expr)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(FormattedValue)^(JoinedStr)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(FormattedValue)^(JoinedStr)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": ", Level: ",
                "path": "(Constant)^(JoinedStr)_(FormattedValue)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": ", Level: ",
                "path": "(Constant)^(JoinedStr)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": ", Level: ",
                "path": "(Constant)^(JoinedStr)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": ", Level: ",
                "path": "(Constant)^(JoinedStr)^(Call)^(Expr)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": ", Level: ",
                "path": "(Constant)^(JoinedStr)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": ", Level: ",
                "path": "(Constant)^(JoinedStr)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": ", Level: ",
                "path": "(Constant)^(JoinedStr)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "level",
                "path": "(Name)^(FormattedValue)^(JoinedStr)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "level",
                "path": "(Name)^(FormattedValue)^(JoinedStr)^(Call)^(Expr)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "level",
                "path": "(Name)^(FormattedValue)^(JoinedStr)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "level",
                "path": "(Name)^(FormattedValue)^(JoinedStr)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "level"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "level"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 16,
        "contexts": [
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Assign)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Assign)_(BinOp)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Assign)_(BinOp)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Assign)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Assign)_(BinOp)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)_(BinOp)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_all_paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(BinOp)^(Assign)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(BinOp)^(Assign)^(FunctionDef)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(BinOp)^(Assign)^(FunctionDef)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(BinOp)^(Assign)^(FunctionDef)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(BinOp)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_all_paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_all_paths"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_all_paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_all_paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(If)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_all_paths"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(If)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_all_paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)^(If)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_all_paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(If)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_all_paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 35,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "floor",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "floor"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "floor"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 95,
        "contexts": [
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)_(Call)_(Constant)",
                "end_token": "aeiou"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "vowels",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "aeiou"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "aeiou",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "vowels"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "vowels"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 92,
        "contexts": [
            {
                "start_token": "nums1",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "intersection"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "intersection"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "intersection"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "intersection"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "intersection"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "intersection",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "intersection"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "intersection"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "intersection"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "intersection"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Compare)^(BoolOp)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "intersection"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(BoolOp)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 7,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 28,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(BinOp)^(Call)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 96,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(While)^(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(While)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(While)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(While)^(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(While)^(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(While)^(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(While)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 119,
        "contexts": [
            {
                "start_token": "index",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "all"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(GeneratorExp)_(Compare)_(Name)",
                "end_token": "side"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(GeneratorExp)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(GeneratorExp)_(comprehension)_(Name)",
                "end_token": "side"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)_(Return)_(Call)_(GeneratorExp)_(comprehension)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(If)_(BoolOp)_(UnaryOp)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Call)_(Name)",
                "end_token": "sum"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Call)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "all"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Return)_(Call)_(GeneratorExp)_(Compare)_(Name)",
                "end_token": "side"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Return)_(Call)_(GeneratorExp)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Return)_(Call)_(GeneratorExp)_(comprehension)_(Name)",
                "end_token": "side"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Return)_(Call)_(GeneratorExp)_(comprehension)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "matchsticks",
                "path": "(Name)^(Call)^(Compare)^(If)_(Return)_(Call)_(Name)",
                "end_token": "all"
            },
            {
                "start_token": "matchsticks",
                "path": "(Name)^(Call)^(Compare)^(If)_(Return)_(Call)_(GeneratorExp)_(Compare)_(Name)",
                "end_token": "side"
            },
            {
                "start_token": "matchsticks",
                "path": "(Name)^(Call)^(Compare)^(If)_(Return)_(Call)_(GeneratorExp)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "matchsticks",
                "path": "(Name)^(Call)^(Compare)^(If)_(Return)_(Call)_(GeneratorExp)_(comprehension)_(Name)",
                "end_token": "side"
            },
            {
                "start_token": "matchsticks",
                "path": "(Name)^(Call)^(Compare)^(If)_(Return)_(Call)_(GeneratorExp)_(comprehension)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "matchsticks",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "matchsticks",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "matchsticks",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "matchsticks",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "matchsticks",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "matchsticks",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "matchsticks",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "matchsticks",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "matchsticks",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "all",
                "path": "(Name)^(Call)_(GeneratorExp)_(Compare)_(Name)",
                "end_token": "side"
            },
            {
                "start_token": "all",
                "path": "(Name)^(Call)_(GeneratorExp)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "all",
                "path": "(Name)^(Call)_(GeneratorExp)_(comprehension)_(Name)",
                "end_token": "side"
            },
            {
                "start_token": "all",
                "path": "(Name)^(Call)_(GeneratorExp)_(comprehension)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "all",
                "path": "(Name)^(Call)^(Return)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "all",
                "path": "(Name)^(Call)^(Return)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "all",
                "path": "(Name)^(Call)^(Return)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "all",
                "path": "(Name)^(Call)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "all",
                "path": "(Name)^(Call)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "all",
                "path": "(Name)^(Call)^(Return)^(If)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "all",
                "path": "(Name)^(Call)^(Return)^(If)^(FunctionDef)^(FunctionDef)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "all",
                "path": "(Name)^(Call)^(Return)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "all",
                "path": "(Name)^(Call)^(Return)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "side",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "side",
                "path": "(Name)^(Compare)^(GeneratorExp)_(comprehension)_(Name)",
                "end_token": "side"
            },
            {
                "start_token": "side",
                "path": "(Name)^(Compare)^(GeneratorExp)_(comprehension)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "side",
                "path": "(Name)^(Compare)^(GeneratorExp)^(Call)^(Return)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "side",
                "path": "(Name)^(Compare)^(GeneratorExp)^(Call)^(Return)^(If)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(GeneratorExp)_(comprehension)_(Name)",
                "end_token": "side"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(GeneratorExp)_(comprehension)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(GeneratorExp)^(Call)^(Return)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(GeneratorExp)^(Call)^(Return)^(If)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "side",
                "path": "(Name)^(comprehension)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "side",
                "path": "(Name)^(comprehension)^(GeneratorExp)^(Call)^(Return)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "side",
                "path": "(Name)^(comprehension)^(GeneratorExp)^(Call)^(Return)^(If)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(comprehension)^(GeneratorExp)^(Call)^(Return)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(comprehension)^(GeneratorExp)^(Call)^(Return)^(If)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(If)_(Call)_(BinOp)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(If)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(If)_(BoolOp)_(UnaryOp)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(BinOp)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Call)_(Name)",
                "end_token": "sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Call)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Call)_(BinOp)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(If)_(BoolOp)_(UnaryOp)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Call)_(Name)",
                "end_token": "sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Call)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(If)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(If)_(Call)_(BinOp)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(If)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(If)_(BoolOp)_(UnaryOp)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(If)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Call)_(Name)",
                "end_token": "sum"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Call)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(BinOp)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(If)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(If)_(Call)_(BinOp)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(If)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "sides",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "sides"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "matchsticks"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(If)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(If)_(Call)_(BinOp)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(If)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 8,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 97,
        "contexts": [
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)_(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)_(Subscript)_(Slice)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "sum",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Slice)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Slice)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Slice)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Slice)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Slice)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Slice)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Slice)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Slice)^(Subscript)^(Call)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)_(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(AugAssign)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(Subscript)^(BinOp)^(AugAssign)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "max",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "max",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "max",
                "path": "(Name)^(Call)^(Assign)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "max",
                "path": "(Name)^(Call)^(Assign)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "k"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 109,
        "contexts": [
            {
                "start_token": "total",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(BoolOp)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "candidates"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "candidates",
                "path": "(Name)^(Subscript)^(Compare)^(BoolOp)^(If)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 69,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Assign)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(If)_(Return)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(If)_(Return)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(If)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 114,
        "contexts": [
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 104,
        "contexts": [
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 42,
        "contexts": [
            {
                "start_token": "node",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)_(For)_(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)_(For)_(If)_(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)_(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)^(Assign)^(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)^(Assign)^(If)_(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)^(Assign)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Assign)^(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Assign)^(If)_(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Assign)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Call)^(Assign)^(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Call)^(Assign)^(If)_(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Call)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(List)^(BinOp)^(Call)^(Assign)^(If)_(If)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(List)^(BinOp)^(Call)^(Assign)^(If)_(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(If)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(If)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "result",
                "path": "(Name)^(If)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "result",
                "path": "(Name)^(If)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "result",
                "path": "(Name)^(If)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "result",
                "path": "(Name)^(If)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Return)^(If)^(If)^(For)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Return)^(If)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Return)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Return)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Return)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Return)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Return)^(FunctionDef)^(FunctionDef)_(Return)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 58,
        "contexts": [
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Return)_(List)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Return)_(List)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Return)_(List)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Return)_(List)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(If)^(FunctionDef)_(If)_(Return)_(List)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Return)_(List)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs_paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Return)_(List)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs_paths"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(List)^(Return)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(List)^(Return)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(List)^(Return)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "path",
                "path": "(Name)^(List)^(Return)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(List)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(List)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(List)^(Return)^(If)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs_paths"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs_paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs_paths"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs_paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Assign)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs_paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "dfs_paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "new_paths",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "dfs_paths"
            },
            {
                "start_token": "new_paths",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "new_paths",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "new_paths",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "new_paths",
                "path": "(Name)^(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "new_paths",
                "path": "(Name)^(Assign)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "new_paths",
                "path": "(Name)^(Assign)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "new_paths",
                "path": "(Name)^(Assign)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "new_paths",
                "path": "(Name)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "dfs_paths",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "dfs_paths",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "dfs_paths",
                "path": "(Name)^(Call)^(Assign)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "dfs_paths",
                "path": "(Name)^(Call)^(Assign)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "dfs_paths",
                "path": "(Name)^(Call)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(Assign)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(Assign)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Assign)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Assign)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Call)^(Assign)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Call)^(Assign)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Call)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Call)^(Assign)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Call)^(Assign)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Call)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(List)^(BinOp)^(Call)^(Assign)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "new_paths"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "new_paths",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 24,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 74,
        "contexts": [
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "window_sum",
                "path": "(Name)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)_(AugAssign)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "k",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "window_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(BinOp)_(BinOp)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)_(AugAssign)_(Subscript)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_sum"
            },
            {
                "start_token": "max_sum",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "max"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 66,
        "contexts": [
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_postorder"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_postorder"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_postorder"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_postorder"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_postorder"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_postorder"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_postorder"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_postorder"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_postorder"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "dfs_postorder",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "dfs_postorder",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "dfs_postorder",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "dfs_postorder",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 115,
        "contexts": [
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)_(If)_(Expr)_(Call)_(Call)_(Attribute)_(Constant)",
                "end_token": "."
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)_(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Attribute)_(Constant)",
                "end_token": "."
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Attribute)_(Constant)",
                "end_token": "."
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Attribute)_(Constant)",
                "end_token": "."
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Call)_(Attribute)_(Constant)",
                "end_token": "."
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": ".",
                "path": "(Constant)^(Attribute)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Call)^(Expr)^(If)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "length",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "length",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "length",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "length",
                "path": "(Name)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "length",
                "path": "(Name)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "length",
                "path": "(Name)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "length",
                "path": "(Name)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "length",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "length",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "length",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(Assign)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(Assign)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)_(Assign)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(Assign)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(Assign)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)_(Assign)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "4",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "start",
                "path": "(Name)^(BinOp)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "start",
                "path": "(Name)^(BinOp)^(Compare)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "start",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(For)_(Assign)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "start",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "start",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "length",
                "path": "(Name)^(BinOp)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "length",
                "path": "(Name)^(BinOp)^(Compare)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "length",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(For)_(Assign)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "length",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "length",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "length",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(For)_(Assign)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(For)_(Assign)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)_(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)_(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)_(If)_(BoolOp)_(BoolOp)_(Compare)_(Subscript)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)_(If)_(BoolOp)_(BoolOp)_(Compare)_(Subscript)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)_(If)_(BoolOp)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)_(If)_(BoolOp)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)_(If)_(BoolOp)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)_(If)_(BoolOp)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)_(If)_(BoolOp)_(BoolOp)_(Compare)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)_(If)_(BoolOp)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)_(If)_(BoolOp)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)_(If)_(BoolOp)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)_(If)_(BoolOp)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "255"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "segment"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "segment",
                "path": "(Name)^(Assign)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Slice)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Slice)_(BinOp)_(Name)",
                "end_token": "length"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Assign)^(For)_(If)_(BoolOp)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 85,
        "contexts": [
            {
                "start_token": "p_count",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "Counter"
            },
            {
                "start_token": "p_count",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "p"
            },
            {
                "start_token": "p_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "p_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "Counter"
            },
            {
                "start_token": "p_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "p"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "Counter"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "p",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "p",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "Counter"
            },
            {
                "start_token": "p",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "Counter"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "Counter",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "p"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "p_count"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "p"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "p_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "p"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "p_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "p"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Delete)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Delete)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "p"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "p"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "p"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Delete)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "p_count"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s_count",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "p"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "p_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "p"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "p_count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Subscript)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(For)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "p"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s_count"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 110,
        "contexts": [
            {
                "start_token": "index",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "digits"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "letter"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Subscript)_(Name)",
                "end_token": "digits"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "letter"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(If)_(UnaryOp)_(Name)",
                "end_token": "digits"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "5"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "6"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "7"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "8"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "9"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "abc"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "def"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "ghi"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "jkl"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "mno"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "pqrs"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "tuv"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "wxyz"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "digits"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "letter"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Subscript)_(Name)",
                "end_token": "digits"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "letter"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(If)_(UnaryOp)_(Name)",
                "end_token": "digits"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "5"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "6"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "7"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "8"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "9"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "abc"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "def"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "ghi"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "jkl"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "mno"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "pqrs"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "tuv"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "wxyz"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "letter"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Subscript)_(Name)",
                "end_token": "digits"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "letter"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(If)_(UnaryOp)_(Name)",
                "end_token": "digits"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "5"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "6"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "7"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "8"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "9"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "abc"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "def"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "ghi"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "jkl"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "mno"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "pqrs"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "tuv"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "wxyz"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "letter"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "letter"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)_(Subscript)_(Subscript)_(Name)",
                "end_token": "digits"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)_(Subscript)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "letter"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(If)_(UnaryOp)_(Name)",
                "end_token": "digits"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "5"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "6"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "7"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "8"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "9"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "abc"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "def"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "ghi"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "jkl"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "mno"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "pqrs"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "tuv"
            },
            {
                "start_token": "letter",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "wxyz"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)_(Subscript)_(Name)",
                "end_token": "digits"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)_(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "letter"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(If)_(UnaryOp)_(Name)",
                "end_token": "digits"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "5"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "6"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "7"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "8"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "9"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "abc"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "def"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "ghi"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "jkl"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "mno"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "pqrs"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "tuv"
            },
            {
                "start_token": "phone_map",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "wxyz"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "letter"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(If)_(UnaryOp)_(Name)",
                "end_token": "digits"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "5"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "6"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "7"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "8"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "9"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "abc"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "def"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "ghi"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "jkl"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "mno"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "pqrs"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "tuv"
            },
            {
                "start_token": "digits",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "wxyz"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "letter"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(If)_(UnaryOp)_(Name)",
                "end_token": "digits"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "phone_map"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "3"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "4"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "5"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "6"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "7"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "8"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "9"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "abc"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "def"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "ghi"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "jkl"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "mno"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "pqrs"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "tuv"
            },
            {
                "start_token": "index",
                "path": "(Name)^(Subscript)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Dict)_(Constant)",
                "end_token": "wxyz"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "letter"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "index"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "phone_map"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 84,
        "contexts": [
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(BinOp)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(BinOp)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Call)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)_(BinOp)_(Call)_(Attribute)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)_(BinOp)_(Call)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)_(BinOp)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Subscript)^(Assign)^(For)_(Assign)_(Name)",
                "end_token": "max_count"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 54,
        "contexts": [
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(List)_(Tuple)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(List)_(Tuple)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Tuple)^(List)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Tuple)^(List)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Return)^(If)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Return)^(If)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 5,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Return)^(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 116,
        "contexts": [
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "10"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "10"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)_(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "10"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "10"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "total",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Call)_(Constant)",
                "end_token": "10"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Subscript)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Subscript)^(Call)^(Expr)^(If)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "10"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "10"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "10"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "10",
                "path": "(Constant)^(Call)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "10",
                "path": "(Constant)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "10",
                "path": "(Constant)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "10",
                "path": "(Constant)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "10",
                "path": "(Constant)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "10",
                "path": "(Constant)^(Call)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "10",
                "path": "(Constant)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "10",
                "path": "(Constant)^(Call)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "10",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "10",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "10",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "10",
                "path": "(Constant)^(Call)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "total"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "total",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "total",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "total",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 31,
        "contexts": [
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Assign)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "component",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "component"
            },
            {
                "start_token": "components",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "components"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 64,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 90,
        "contexts": [
            {
                "start_token": "nums1",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums1",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "nums2",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "closest_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Call)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(Name)",
                "end_token": "abs"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Call)_(BinOp)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums1"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums2"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "closest_pair",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(BoolOp)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "closest_pair"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 1,
        "contexts": [
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 12,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "swapped",
                "path": "(Name)^(Assign)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Assign)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)^(For)_(If)_(UnaryOp)_(Name)",
                "end_token": "swapped"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 62,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 9,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 111,
        "contexts": [
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "("
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": ")"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "("
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": ")"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "("
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "("
            },
            {
                "start_token": "s",
                "path": "(Name)^(BinOp)^(Call)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(BinOp)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(BinOp)^(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "(",
                "path": "(Constant)^(BinOp)^(Call)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "(",
                "path": "(Constant)^(BinOp)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "(",
                "path": "(Constant)^(BinOp)^(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "(",
                "path": "(Constant)^(BinOp)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "(",
                "path": "(Constant)^(BinOp)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "(",
                "path": "(Constant)^(BinOp)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": ")"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": ")"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": ")"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "backtrack",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "s",
                "path": "(Name)^(BinOp)_(Constant)",
                "end_token": ")"
            },
            {
                "start_token": "s",
                "path": "(Name)^(BinOp)^(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(BinOp)^(Call)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(BinOp)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(BinOp)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": ")",
                "path": "(Constant)^(BinOp)^(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": ")",
                "path": "(Constant)^(BinOp)^(Call)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": ")",
                "path": "(Constant)^(BinOp)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": ")",
                "path": "(Constant)^(BinOp)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "backtrack"
            }
        ],
        "label": "Backtracking"
    },
    {
        "code_id": 101,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "min_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "float",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "inf",
                "path": "(Constant)^(Call)^(Assign)^(FunctionDef)_(Return)_(IfExp)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(IfExp)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(IfExp)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Name)",
                "end_token": "float"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Call)_(Constant)",
                "end_token": "inf"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Compare)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(IfExp)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Assign)_(Name)",
                "end_token": "min_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Assign)_(Call)_(Name)",
                "end_token": "min_length"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 56,
        "contexts": [
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs_recursive"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "dfs_recursive",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "dfs_recursive",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "dfs_recursive",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 48,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "result",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "result"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 65,
        "contexts": [
            {
                "start_token": "List",
                "path": "(Name)^(Subscript)_(Subscript)_(Name)",
                "end_token": "List"
            },
            {
                "start_token": "List",
                "path": "(Name)^(Subscript)_(Subscript)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "List",
                "path": "(Name)^(Subscript)^(arg)^(arguments)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "List",
                "path": "(Name)^(Subscript)^(arg)^(arguments)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "List",
                "path": "(Name)^(Subscript)^(arg)^(arguments)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "List",
                "path": "(Name)^(Subscript)^(arg)^(arguments)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "List",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "int"
            },
            {
                "start_token": "List",
                "path": "(Name)^(Subscript)^(Subscript)^(arg)^(arguments)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "List",
                "path": "(Name)^(Subscript)^(Subscript)^(arg)^(arguments)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "List",
                "path": "(Name)^(Subscript)^(Subscript)^(arg)^(arguments)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "int",
                "path": "(Name)^(Subscript)^(Subscript)^(arg)^(arguments)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "int",
                "path": "(Name)^(Subscript)^(Subscript)^(arg)^(arguments)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "int",
                "path": "(Name)^(Subscript)^(Subscript)^(arg)^(arguments)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(While)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Call)^(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Call)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Call)^(Compare)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Call)^(Compare)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Call)^(Compare)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Call)^(Compare)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Call)^(Compare)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Compare)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Assign)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Compare)^(If)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Compare)^(If)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Expr)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Call)^(Expr)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Call)^(Expr)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Call)^(Expr)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Call)^(Expr)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "nei",
                "path": "(Name)^(For)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "rooms",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "curr"
            },
            {
                "start_token": "rooms",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "rooms",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "rooms",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "rooms",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "rooms",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "rooms",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "q"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Subscript)^(For)_(Expr)_(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "curr",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Compare)_(Call)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "q",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "nei"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "v"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)_(Call)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Call)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "v",
                "path": "(Name)^(Call)^(Compare)_(Call)_(Name)",
                "end_token": "rooms"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "rooms"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 82,
        "contexts": [
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Assign)_(Tuple)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Compare)^(While)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(BoolOp)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(While)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Compare)^(While)^(FunctionDef)_(Return)_(Tuple)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(BinOp)^(Compare)^(BoolOp)^(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(BoolOp)^(If)_(If)_(Return)_(Tuple)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(If)_(If)_(Compare)_(BinOp)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(If)_(If)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 50,
        "contexts": [
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "min"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "min",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "min",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "min",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "min",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "min",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "min",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "min",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "min",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "min",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "min",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "min",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(Call)^(Call)^(For)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "j",
                "path": "(Name)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "n"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "n",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "i",
                "path": "(Name)^(BinOp)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Call)^(For)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Name)",
                "end_token": "j"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "arr"
            }
        ],
        "label": "Bubble Sort"
    },
    {
        "code_id": 18,
        "contexts": [
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "reversed"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "reversed"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "reversed"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)_(If)_(Expr)_(Call)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "reversed"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "reversed"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "reversed"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "reversed"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "stack"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Call)_(Name)",
                "end_token": "reversed"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)_(Call)_(Name)",
                "end_token": "reversed"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)_(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)_(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "stack",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "reversed",
                "path": "(Name)^(Call)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "reversed",
                "path": "(Name)^(Call)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "reversed",
                "path": "(Name)^(Call)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 15,
        "contexts": [
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)_(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(While)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(While)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(While)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(While)_(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(While)_(If)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(While)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(While)_(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "True",
                "path": "(Constant)^(Return)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(If)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "neighbor"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 87,
        "contexts": [
            {
                "start_token": "k",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Return)^(If)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "count",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "product",
                "path": "(Name)^(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "product",
                "path": "(Name)^(AugAssign)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "product",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "product",
                "path": "(Name)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "product",
                "path": "(Name)^(AugAssign)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "product",
                "path": "(Name)^(AugAssign)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "product",
                "path": "(Name)^(AugAssign)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "product",
                "path": "(Name)^(AugAssign)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "product",
                "path": "(Name)^(AugAssign)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "product",
                "path": "(Name)^(AugAssign)^(For)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "product",
                "path": "(Name)^(AugAssign)^(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "product",
                "path": "(Name)^(AugAssign)^(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "product",
                "path": "(Name)^(AugAssign)^(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "product",
                "path": "(Name)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "k"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Compare)^(While)^(For)_(AugAssign)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Compare)^(While)^(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Compare)^(While)^(For)_(AugAssign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Compare)^(While)^(For)_(AugAssign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "product",
                "path": "(Name)^(Compare)^(While)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "count"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Name)",
                "end_token": "product"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "k",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "left"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 100,
        "contexts": [
            {
                "start_token": "sum_map",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "sum_map",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "sum_map",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "sum_map",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)_(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Call)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "current_sum",
                "path": "(Name)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Compare)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "sum_map"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "current_sum"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)_(If)_(If)_(Assign)_(Name)",
                "end_token": "i"
            },
            {
                "start_token": "i",
                "path": "(Name)^(Subscript)^(AugAssign)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 75,
        "contexts": [
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "max_length",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(If)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Name)",
                "end_token": "range"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "range",
                "path": "(Name)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Compare)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(If)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(Call)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)^(For)_(Assign)_(Subscript)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)^(For)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)^(For)_(Assign)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)^(For)_(Assign)_(Call)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)^(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)^(For)_(Assign)_(Call)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)^(For)_(Assign)_(Call)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "char_index",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "max_length"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "max"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Call)_(BinOp)_(Subscript)_(Name)",
                "end_token": "char_index"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Assign)_(Call)_(BinOp)_(Subscript)_(Subscript)_(Name)",
                "end_token": "s"
            }
        ],
        "label": "Sliding Window"
    },
    {
        "code_id": 44,
        "contexts": [
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Tuple)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Tuple)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Tuple)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Tuple)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Return)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Return)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Return)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 49,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Return)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "2",
                "path": "(Constant)^(BinOp)^(Assign)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 91,
        "contexts": [
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "low",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Compare)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Name)",
                "end_token": "high"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)_(If)_(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "high",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "nums",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "low"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "nums"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Assign)_(Tuple)_(Subscript)_(Name)",
                "end_token": "mid"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 36,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "arr",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)_(UnaryOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "ceiling",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(UnaryOp)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)_(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "mid",
                "path": "(Name)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)_(Constant)",
                "end_token": "2"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "ceiling"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "arr"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Subscript)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Name)",
                "end_token": "mid"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)_(If)_(Assign)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(BinOp)^(BinOp)^(Assign)^(While)^(FunctionDef)_(Return)_(Name)",
                "end_token": "ceiling"
            }
        ],
        "label": "Binary Search"
    },
    {
        "code_id": 3,
        "contexts": [
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(arguments)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "None",
                "path": "(Constant)^(Compare)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(If)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "function"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "function"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "function"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "function"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "function"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "function"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "function"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "function"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "function",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "function",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "function",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)_(Return)_(Name)",
                "end_token": "visited"
            }
        ],
        "label": "DFS"
    },
    {
        "code_id": 14,
        "contexts": [
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "deque"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Tuple)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(Call)_(List)_(Tuple)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Tuple)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)_(List)_(Tuple)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "deque",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Tuple)^(List)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)_(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Tuple)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)_(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Subscript)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "goal"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Return)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Return)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(For)^(While)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(For)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "goal",
                "path": "(Name)^(Compare)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Return)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Return)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Return)^(If)_(Expr)_(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Return)^(If)^(For)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)^(Return)^(If)^(For)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(List)^(BinOp)^(Return)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(List)^(BinOp)^(Return)^(If)_(Expr)_(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Tuple)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Tuple)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "vertex"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            },
            {
                "start_token": "vertex",
                "path": "(Name)^(Call)^(Expr)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "None"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 72,
        "contexts": [
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)_(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "len"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)_(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "len",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Call)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(BinOp)^(Tuple)^(Assign)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Compare)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "s"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)_(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "s",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)_(Return)_(Constant)",
                "end_token": "False"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(Subscript)^(Compare)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)^(While)_(AugAssign)_(Name)",
                "end_token": "left"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "False",
                "path": "(Constant)^(Return)^(If)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "left",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(While)_(AugAssign)_(Name)",
                "end_token": "right"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(While)_(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)_(Constant)",
                "end_token": "1"
            },
            {
                "start_token": "right",
                "path": "(Name)^(AugAssign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            },
            {
                "start_token": "1",
                "path": "(Constant)^(AugAssign)^(While)^(FunctionDef)_(Return)_(Constant)",
                "end_token": "True"
            }
        ],
        "label": "Two Pointers"
    },
    {
        "code_id": 2,
        "contexts": [
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)_(Call)_(Name)",
                "end_token": "set"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "set",
                "path": "(Name)^(Call)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Assign)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)_(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Constant)",
                "end_token": "0"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "print"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(Expr)_(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "0",
                "path": "(Constant)^(Call)^(Assign)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "print",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Call)^(Expr)^(While)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "queue"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "queue",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "visited"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "visited",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "neighbor"
            }
        ],
        "label": "BFS"
    },
    {
        "code_id": 43,
        "contexts": [
            {
                "start_token": "node",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "target"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Attribute)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)_(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "target",
                "path": "(Name)^(Compare)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Attribute)^(Call)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Attribute)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)_(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Call)^(Expr)^(If)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "graph"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)_(If)_(Expr)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)_(Name)",
                "end_token": "node"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "graph",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)_(If)_(Expr)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "node",
                "path": "(Name)^(Subscript)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)_(Expr)_(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "path",
                "path": "(Name)^(Compare)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(BinOp)_(Name)",
                "end_token": "path"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)_(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "neighbor",
                "path": "(Name)^(Call)^(Expr)^(If)^(For)^(FunctionDef)^(FunctionDef)_(Assign)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "path",
                "path": "(Name)^(BinOp)_(List)_(Name)",
                "end_token": "neighbor"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "dfs"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(Expr)_(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "paths",
                "path": "(Name)^(Assign)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "dfs",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)_(List)_(Name)",
                "end_token": "start"
            },
            {
                "start_token": "start",
                "path": "(Name)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            },
            {
                "start_token": "start",
                "path": "(Name)^(List)^(Call)^(Expr)^(FunctionDef)_(Return)_(Name)",
                "end_token": "paths"
            }
        ],
        "label": "DFS"
    }
]